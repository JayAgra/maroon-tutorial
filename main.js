/*jslint es6*/
/*jslint browser: true*/

//list of all valid pages to be used for page navigation
const pageList = [
  "0-1.html", "0-2.html", "0-3.html", "0-4.html", "0-5.html", "0-q.html",
  "1-1.html",
  "supp-1.html"
];

//renders page in the <article> tag

//why am I not using an iframe? i only have a mediocre reason. xhr that inserts
//text into body is cleaner, and allows the .html files to only contain the
//section, no need for them to contain styles, html/head/body. smaller responses,
//happier server.

//very important - add way for browser to tell what page user is on, allow
//page linking so someone can send a page link. this is currently not possible,
//but can be implemented with querystring parameters that specify the targeted
//document.
/**
 *
 * @param {string} path path to load document from. example: "0-1.html"
 */

function renderHTML(path) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", `./pages/${path}`, true);

    xhr.onreadystatechange = async () => {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        console.log("got it")
        //set data-page to path for use with
        document.getElementById("article").setAttribute("data-page", path);
        document.getElementById("article").innerHTML = xhr.responseText;
        disableHome();
        hljs.highlightAll();
      } else if (xhr.status === 401) {
        console.log("401 unauth");
        return "401";
      } else if (xhr.status === 400) {
        console.log("400 failure");
        return "400";
      } else if (xhr.status === 500) {
        console.log("500 failure");
        return "500";
      } else if (xhr.status === 403) {
        console.log("403 access denied");
      } else {
        console.log("awaiting response");
      }
    };

    xhr.send();
}

//quiz ids are generated by require('crypto').randomBytes(16).toString('hex') with node.js
//quiz answers are stored in browser because results dont actually matter
//ugly solution for attempt number- store in custom data attribure
/**
 *
 * @param {string} id - unique quiz ID
 * @param {HTMLElement} button - button html element
 */

function runQuiz(id, button) {
    var answer = document.getElementById(id).getAttribute("data-answer")
    var selected = document.querySelector(`input[name="${id}-radio"]:checked`);
    if (selected.value === answer) {
        document.getElementsByName(`${id}-radio`).forEach(box => box.disabled = true)
        button.setAttribute("data-attempts", Number(button.getAttribute("data-attempts")) + 1)
        button.disabled = true;
        selected.parentElement.style.color = "#0f0";
        if (button.getAttribute("data-attempts") === "1") {
          button.innerHTML = "correct on first try";
          button.style.color = "#0f0";
        } else if (button.getAttribute("data-attempts") === "4") {
          button.innerHTML = "failed. L YOU SUCK. alex will use copilot to kill you. Why did you even join programming in the first place you absolute failure to society. :D";
          button.style.color = "#f00";
        } else {
          button.innerHTML = "correct in " + button.getAttribute("data-attempts") + " tries";
          button.style.color = "#ff0";
        }
    } else {
        button.setAttribute("data-attempts", Number(button.getAttribute("data-attempts")) + 1)
        selected.parentElement.style.color = "#f00";
        selected.disabled = "true";
    }
}

//need to finish this function to allow page navigation with forward and back buttons
/**
 *
 * @param {boolean} forward - should the page move forward? if false, page moves backward.
 * @returns nothing honestly
 */

function changePage(forward) {
  return;
}

//captures back keyboard shortcut and takes user to toc page. uses metaKey
//to be universal, instead of checking OS and picking command/control
document.addEventListener('keydown', function(event) {
  if (event.metaKey && event.key === "ArrowLeft") {
    event.preventDefault();
    renderHTML("toc.html")
  }
});

function disableHome() {
  if (document.getElementById("article").getAttribute("data-page") === "toc.html") {
    document.getElementById("homeButton").disabled = "true";
    document.getElementById("homeButton").onclick = '';
    document.getElementById("homeButton").style.color = "gray";
  } else {
    document.getElementById("homeButton").removeAttribute("disabled")
    document.getElementById("homeButton").onclick = function(){renderHTML("toc.html")};
    document.getElementById("homeButton").style.color = "#2997ff"; //ffd82c
  }
}

//to add: service worker for ability to access comepletely offline.